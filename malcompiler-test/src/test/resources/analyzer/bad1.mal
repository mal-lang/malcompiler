// no #id
// no #version
#custom: ""
#custom: "" // duplicate define
category emp {} // empty category (warning)
category cat
  rationale: "rat"
  {}
category cat
  info: "category"
  info: "category" // duplicate info
  rationale: "rat" // duplicate rationale from different definition
  {
  asset _A
    rationale: "asset"
    rationale: "asset" // duplicate rationale
    {
    | compromise ->
      (a /\ a), // not attack step
      c.compromise
    | compromise <- a // duplicate attack step AND invalid require
    & invalidate ->
      (c \/ a).compromise, // invalid types
      c[_A].compromise // invalid typeof
  }
  abstract asset AA extends _A { // abstract but never used (warning)
    & compromise // types differ from parent
    | access +> // parent doesn't have attack step
      authorize, // invalid attack step
      b.authorize // invalid field
  }
  asset AA {} // duplicate asset
  asset _C {
    let var1 = var1
    let var1 = a // duplicate variable
    let aaa = a
    | compromise {C, C} -> // duplicate CIA
      var1, // cyclic variable
      aaa()*.compromise // invalid previous type
    E e {C} // defense with CIA
      <- a
  }
}
associations {
  _A [a] * <-- ac --> * [c] _C
  _A [a] * <-- aa --> * [a] _A // duplicate fields
     assumptions: "association"
     assumptions: "association" // duplicate association
}
