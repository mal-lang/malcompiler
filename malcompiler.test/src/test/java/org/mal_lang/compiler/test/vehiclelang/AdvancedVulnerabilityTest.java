package org.mal_lang.compiler.test.vehiclelang;

import core.Asset;
import core.AttackStep;
import core.Attacker;
import core.Defense;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.mal_lang.compiler.test.MalTest;
import vehicle.Account;
import vehicle.CANNetwork;
import vehicle.ConnectionOrientedDataflow;
import vehicle.Data;
import vehicle.ECU;
import vehicle.SensorOrActuator;
import vehicle.UDSService;
import vehicle.Vulnerability;

public class AdvancedVulnerabilityTest extends MalTest {

  @Test
  public void testVulnerabilityOnUDS() {
    // Testing vulnerability on an UDS service.
    /*
                    |- PrivEsc(Vulnerability)
    Root(account)---|
         |   _______|  Data
         |  |           |
    UDS_Service <---> Ecu#1 <---> vNet(CAN)
         |                         | |
         |                         | |---> Ecu#2 <---> Sensor/Actuator
    UDS_Dataflow <-----------------
    */
    // TARGET: udsService.access & dataflow.respond ENTRY_POINT: UDS_Service.connect
    System.out.println(
        "### "
            + Thread.currentThread()
                .getStackTrace()[1]
                .getMethodName()); // Printing the test's name

    ECU ecu1 =
        new ECU("ECU#1", true, true); // Enabled operation mode and message confliction protection
    ECU ecu2 = new ECU("ECU#2", true, true);
    SensorOrActuator phyMachine = new SensorOrActuator("Sensor/Actuator");
    CANNetwork vNet = new CANNetwork("CAN");
    ConnectionOrientedDataflow dataflow = new ConnectionOrientedDataflow("UDS_Dataflow");
    UDSService udsService = new UDSService("UDS_Service");
    Account root = new Account("Root");
    Vulnerability privEsc = new Vulnerability("PrivEsc");
    Data data = new Data("Data");

    ecu1.addExecutees(udsService);
    ecu1.addVehiclenetworks(vNet);
    ecu1.addData(data);
    ecu2.addVehiclenetworks(vNet);
    ecu2.addSensorsOrActuators(phyMachine);
    udsService.addAccount(root);
    udsService.addConnectionVulnerabilities(privEsc);
    privEsc.addPrivileges(root);
    udsService.addDataflows(dataflow);
    vNet.addDataflows(dataflow);

    Attacker attacker = new Attacker();
    attacker.addAttackPoint(udsService.connect);
    attacker.attack();

    privEsc.exploit.assertCompromisedWithEffort();
    root.authenticate.assertUncompromised();
    root.compromise.assertCompromisedWithEffort();
    udsService.access.assertCompromisedWithEffort();
    ecu1.connect.assertCompromisedWithEffort();
    data.requestAccess.assertCompromisedWithEffort();
    dataflow.respond.assertCompromisedWithEffort();

    vNet.accessNetworkLayer.assertUncompromised();
    ecu2.connect.assertUncompromised();
  }

  @AfterEach
  public void deleteModel() {
    Asset.allAssets.clear();
    AttackStep.allAttackSteps.clear();
    Defense.allDefenses.clear();
  }
}
